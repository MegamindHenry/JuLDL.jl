var documenterSearchIndex = {"docs":
[{"location":"man/all_manual/","page":"All Manual index","title":"All Manual index","text":"CurrentModule = JuLDL","category":"page"},{"location":"man/all_manual/","page":"All Manual index","title":"All Manual index","text":"","category":"page"},{"location":"man/cholesky/","page":"Cholesky","title":"Cholesky","text":"CurrentModule = JuLDL","category":"page"},{"location":"man/cholesky/#Cholesky","page":"Cholesky","title":"Cholesky","text":"","category":"section"},{"location":"man/cholesky/","page":"Cholesky","title":"Cholesky","text":"  make_transform_fac\n  make_transform_matrix\n  make_transform_fac(::SparseMatrixCSC)\n  make_transform_fac(::Matrix)\n  make_transform_matrix(::Union{LinearAlgebra.Cholesky, SuiteSparse.CHOLMOD.Factor}, ::Union{SparseMatrixCSC, Matrix}, ::Union{SparseMatrixCSC, Matrix})\n  make_transform_matrix(::SparseMatrixCSC, ::Matrix)\n  make_transform_matrix(::Matrix, ::Union{SparseMatrixCSC, Matrix})\n  make_transform_matrix(::SparseMatrixCSC, ::SparseMatrixCSC)\n  format_matrix(::Union{SparseMatrixCSC, Matrix}, ::Symbol, ::Bool)","category":"page"},{"location":"man/cholesky/#JuLDL.make_transform_fac","page":"Cholesky","title":"JuLDL.make_transform_fac","text":"the first part of make transform matrix, usually in the shuo function to same time and computing resources\n\n\n\n\n\n","category":"function"},{"location":"man/cholesky/#JuLDL.make_transform_matrix","page":"Cholesky","title":"JuLDL.make_transform_matrix","text":"using cholesky decomposition to calculate transformation matrix from S to C or from C to S\n\n\n\n\n\n","category":"function"},{"location":"man/cholesky/#JuLDL.make_transform_fac-Tuple{SparseArrays.SparseMatrixCSC}","page":"Cholesky","title":"JuLDL.make_transform_fac","text":"maketransformfac(::SparseMatrixCSC)\n\ncalculate first part of cholesky decomposition for sparse matrix\n\n\n\n\n\n","category":"method"},{"location":"man/cholesky/#JuLDL.make_transform_fac-Tuple{Array{T,2} where T}","page":"Cholesky","title":"JuLDL.make_transform_fac","text":"maketransformfac(::Matrix)\n\ncalculate first part of cholesky decomposition for dense matrix\n\n\n\n\n\n","category":"method"},{"location":"man/cholesky/#JuLDL.make_transform_matrix-Tuple{Union{SuiteSparse.CHOLMOD.Factor, LinearAlgebra.Cholesky},Union{Array{T,2} where T, SparseArrays.SparseMatrixCSC},Union{Array{T,2} where T, SparseArrays.SparseMatrixCSC}}","page":"Cholesky","title":"JuLDL.make_transform_matrix","text":"maketransformmatrix(::Union{LinearAlgebra.Cholesky, SuiteSparse.CHOLMOD.Factor}, ::Union{SparseMatrixCSC, Matrix}, ::Union{SparseMatrixCSC, Matrix})\n\nsecond part of calculate cholesky decomposition transformation matrix\n\n...\n\nArguments\n\noutput_format::Symbol=:auto: to force output format to dense(:dense) or sparse(:sparse), make it auto(:auto) to determined by the program\nverbose::Bool=false: if verbose, more information will be printed out\n\nExamples\n\n  C = [1 1 1 1 0 0 0 0; 1 0 1 0 1 0 1 0; 0 0 0 0 1 1 1 1]\n  S = [1 0 1 0; 1 1 0 0; 0 0 1 1]\n\n  JuLDL.make_transform_matrix(C, S)\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/cholesky/#JuLDL.make_transform_matrix-Tuple{SparseArrays.SparseMatrixCSC,Array{T,2} where T}","page":"Cholesky","title":"JuLDL.make_transform_matrix","text":"maketransformmatrix(::SparseMatrixCSC, ::Matrix)\n\nusing cholesky decomposition to calculate transformation matrix from X to Y, where X is a sparse matrix and Y is a dense matrix\n\n...\n\nArguments\n\nmethod::Symbol=:additive: shift mode whether :additive or others\nshift::Float64=0.02: shift value\nmultiplier::Float64=1.01: multiplier value\noutput_format::Symbol=:auto: to force output format to dense(:dense) or sparse(:sparse), make it auto(:auto) to determined by the program\nverbose::Bool=false: if verbose, more information will be printed out\n\nExamples\n\n  C = [1 1 1 1 0 0 0 0; 1 0 1 0 1 0 1 0; 0 0 0 0 1 1 1 1]\n  S = [1 0 1 0; 1 1 0 0; 0 0 1 1]\n\n  JuLDL.make_transform_matrix(C, S)\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/cholesky/#JuLDL.make_transform_matrix-Tuple{Array{T,2} where T,Union{Array{T,2} where T, SparseArrays.SparseMatrixCSC}}","page":"Cholesky","title":"JuLDL.make_transform_matrix","text":"maketransformmatrix(::Matrix, ::Union{SparseMatrixCSC, Matrix})\n\nusing cholesky decomposition to calculate transformation matrix from X to Y, where X is a dense matrix and Y is either a dense matrix or a sparse matrix\n\n...\n\nArguments\n\nmethod::Symbol=:additive: shift mode whether :additive or others\nshift::Float64=0.02: shift value\nmultiplier::Float64=1.01: multiplier value\noutput_format::Symbol=:auto: to force output format to dense(:dense) or sparse(:sparse), make it auto(:auto) to determined by the program\nverbose::Bool=false: if verbose, more information will be printed out\n\nExamples\n\n  C = [1 1 1 1 0 0 0 0; 1 0 1 0 1 0 1 0; 0 0 0 0 1 1 1 1]\n  S = [1 0 1 0; 1 1 0 0; 0 0 1 1]\n\n  JuLDL.make_transform_matrix(C, S)\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/cholesky/#JuLDL.make_transform_matrix-Tuple{SparseArrays.SparseMatrixCSC,SparseArrays.SparseMatrixCSC}","page":"Cholesky","title":"JuLDL.make_transform_matrix","text":"maketransformmatrix(::SparseMatrixCSC, ::SparseMatrixCSC)\n\nusing cholesky decomposition to calculate transformation matrix from X to Y, where X is a sparse matrix and Y is a sparse matrix\n\n...\n\nArguments\n\nmethod::Symbol=:additive: shift mode whether :additive or others\nshift::Float64=0.02: shift value\nmultiplier::Float64=1.01: multiplier value\noutput_format::Symbol=:auto: to force output format to dense(:dense) or sparse(:sparse), make it auto(:auto) to determined by the program\nverbose::Bool=false: if verbose, more information will be printed out\n\nExamples\n\n  C = [1 1 1 1 0 0 0 0; 1 0 1 0 1 0 1 0; 0 0 0 0 1 1 1 1]\n  S = [1 0 1 0; 1 1 0 0; 0 0 1 1]\n\n  JuLDL.make_transform_matrix(C, S)\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/cholesky/#JuLDL.format_matrix-Tuple{Union{Array{T,2} where T, SparseArrays.SparseMatrixCSC},Symbol,Bool}","page":"Cholesky","title":"JuLDL.format_matrix","text":"format_matrix(::Union{SparseMatrixCSC, Matrix}, ::Symbol, ::Bool)\n\nconvert ourput matrix to a dense matrix or sparse matrix\n\n\n\n\n\n","category":"method"},{"location":"man/make_semantic_matrix/","page":"Make Semantic Matrix","title":"Make Semantic Matrix","text":"CurrentModule = JuLDL","category":"page"},{"location":"man/make_semantic_matrix/#Make-Semantic-Matrix","page":"Make Semantic Matrix","title":"Make Semantic Matrix","text":"","category":"section"},{"location":"man/make_semantic_matrix/","page":"Make Semantic Matrix","title":"Make Semantic Matrix","text":"  PS_Matrix_Struct\n  make_pS_matrix\n  make_S_matrix\n  make_pS_matrix(::DataFrame)\n  make_pS_matrix(::DataFrame, ::PS_Matrix_Struct)\n  make_S_matrix(::DataFrame, ::Vector, ::Vector)\n  make_S_matrix(::DataFrame, ::DataFrame, ::Vector, ::Vector)\n  make_S_matrix(::DataFrame)\n  make_S_matrix(::DataFrame, ::DataFrame)","category":"page"},{"location":"man/make_semantic_matrix/#JuLDL.PS_Matrix_Struct","page":"Make Semantic Matrix","title":"JuLDL.PS_Matrix_Struct","text":"This a struct that store all information about prelinguistic and their feature indices. pS is the cue matrix f2i is the dictionary return indices giving features i2f is in another hand return features when giving indices\n\n\n\n\n\n","category":"type"},{"location":"man/make_semantic_matrix/#JuLDL.make_pS_matrix","page":"Make Semantic Matrix","title":"JuLDL.make_pS_matrix","text":"This is the function that make prelinguistic semantic matrix.\n\n\n\n\n\n","category":"function"},{"location":"man/make_semantic_matrix/#JuLDL.make_S_matrix","page":"Make Semantic Matrix","title":"JuLDL.make_S_matrix","text":"This is the function that make simulated semantic matrix.\n\n\n\n\n\n","category":"function"},{"location":"man/make_semantic_matrix/#JuLDL.make_pS_matrix-Tuple{DataFrames.DataFrame}","page":"Make Semantic Matrix","title":"JuLDL.make_pS_matrix","text":"makepSmatrix(::DataFrame)\n\nThis is a function that create prelinguistic matrix giving a csv file.\n\n...\n\nArguments\n\ncol_name::Symbol=:CommunicativeIntention: the column name for communicative intention\nsep_token::String=\"_\": the seperated token in the communicative intention column\n\nExamples\n\nutterance = CSV.DataFrame!(CSV.File(joinpath(\"data\", \"utterance_mini.csv\")))\ns_obj_train = JuLDL.make_pS_matrix(utterance)\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/make_semantic_matrix/#JuLDL.make_pS_matrix-Tuple{DataFrames.DataFrame,JuLDL.PS_Matrix_Struct}","page":"Make Semantic Matrix","title":"JuLDL.make_pS_matrix","text":"makepSmatrix(::DataFrame, PSMatrixStruct)\n\nThis is a function that construct prelinguistic matrix giving utterances and training sobj. The feature indices should maintain the same as thoes in sobj.\n\n...\n\nArguments\n\ncol_name::Symbol=:CommunicativeIntention: the column name for communicative intention\nsep_token::String=\"_\": the seperated token in the communicative intention column\n\nExamples\n\nutterance = CSV.DataFrame!(CSV.File(joinpath(\"data\", \"utterance_mini.csv\")))\ns_obj_train = JuLDL.make_pS_matrix(utterance)\ns_obj_val = JuLDL.make_pS_matrix(utterance_val, s_obj_train)\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/make_semantic_matrix/#JuLDL.make_S_matrix-Tuple{DataFrames.DataFrame,Array{T,1} where T,Array{T,1} where T}","page":"Make Semantic Matrix","title":"JuLDL.make_S_matrix","text":"makeSmatrix(::DataFrame, ::Vector, ::Vector)\n\nThis is a function that create simulated semantic matrix. Give each feature a random semantic vector, and sum up all features to compose the semantic vector.\n\n...\n\nArguments\n\nncol::Int64=200: the dimension size of vectors, usually the same as cue vectors\nsd_base_mean::Int64=1: the sd mean of base features\nsd_inflection_mean::Int64=1: the sd mean of inflectional features\nsd_base::Int64=4: the sd of base features\nsd_inflection::Int64=4: the sd of inflectional features\nseed::Int64=314: the random seed\nisdeep::Bool=true: if in deep mode, mean of each feature is also randomized \nadd_noise::Bool=true: whether to add noise at the end of construction\nsd_noise::Int64=1: the sd of the noise matrix\nisnormalize::Bool=false: if normalized, values of matrix maintain close between 1 and -1\n\nExamples\n\n# Examples\nfrench = CSV.DataFrame!(CSV.File(joinpath(\"data\", \"french_mini.csv\")))\nS_train = JuLDL.make_S_matrix(\n  french,\n  [\"Lexeme\"],\n  [\"Tense\",\"Aspect\",\"Person\",\"Number\",\"Gender\",\"Class\",\"Mood\"])\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/make_semantic_matrix/#JuLDL.make_S_matrix-Tuple{DataFrames.DataFrame,DataFrames.DataFrame,Array{T,1} where T,Array{T,1} where T}","page":"Make Semantic Matrix","title":"JuLDL.make_S_matrix","text":"makeSmatrix(::DataFrame, ::DataFrame, ::Vector, ::Vector)\n\nThis is a function that create validation simulated semantic matrix. Give each feature a random semantic vector, and sum up all features to compose the semantic vector.\n\n...\n\nArguments\n\nncol::Int64=200: the dimension size of vectors, usually the same as cue vectors\nsd_base_mean::Int64=1: the sd mean of base features\nsd_inflection_mean::Int64=1: the sd mean of inflectional features\nsd_base::Int64=4: the sd of base features\nsd_inflection::Int64=4: the sd of inflectional features\nseed::Int64=314: the random seed\nisdeep::Bool=true: if in deep mode, mean of each feature is also randomized \nadd_noise::Bool=true: whether to add noise at the end of construction\nsd_noise::Int64=1: the sd of the noise matrix\nisnormalize::Bool=false: if normalized, values of matrix maintain close between 1 and -1\n\nExamples\n\n# Examples\nfrench = CSV.DataFrame!(CSV.File(joinpath(\"data\", \"french_mini.csv\")))\nfrench_val = french[100:end,:]\nS_train, S_val = JuLDL.make_S_matrix(\n    french,\n    french_val,\n    [\"Lexeme\"],\n    [\"Tense\",\"Aspect\",\"Person\",\"Number\",\"Gender\",\"Class\",\"Mood\"])\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/make_semantic_matrix/#JuLDL.make_S_matrix-Tuple{DataFrames.DataFrame}","page":"Make Semantic Matrix","title":"JuLDL.make_S_matrix","text":"makeSmatrix(::DataFrame)\n\nThis is a function that create simulated semantic matrix, provided for dataset that only have base features. Give each feature a random semantic vector, and sum up all features to compose the semantic vector.\n\n...\n\nArguments\n\nbase::Vector=[\"Lexeme\"]: the base features \nncol::Int64=200: the dimension size of vectors, usually the same as cue vectors\nsd_base_mean::Int64=1: the sd mean of base features\nsd_base::Int64=4: the sd of base features\nseed::Int64=314: the random seed\nisdeep::Bool=true: if in deep mode, mean of each feature is also randomized \nadd_noise::Bool=true: whether to add noise at the end of construction\nsd_noise::Int64=1: the sd of the noise matrix\n\nExamples\n\nfrench = CSV.DataFrame!(CSV.File(joinpath(\"data\", \"french_mini.csv\")))\n\nS_train = JuLDL.make_S_matrix(\n  french,\n  base=[\"Lexeme\"])=\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/make_semantic_matrix/#JuLDL.make_S_matrix-Tuple{DataFrames.DataFrame,DataFrames.DataFrame}","page":"Make Semantic Matrix","title":"JuLDL.make_S_matrix","text":"makeSmatrix(::DataFrame, ::DataFrame)\n\nThis is a function that create validation simulated semantic matrix, provided for dataset that only have base features. Give each feature a random semantic vector, and sum up all features to compose the semantic vector.\n\n...\n\nArguments\n\nbase::Vector=[\"Lexeme\"]: the base features \nncol::Int64=200: the dimension size of vectors, usually the same as cue vectors\nsd_base_mean::Int64=1: the sd mean of base features\nsd_base::Int64=4: the sd of base features\nseed::Int64=314: the random seed\nisdeep::Bool=true: if in deep mode, mean of each feature is also randomized \nadd_noise::Bool=true: whether to add noise at the end of construction\nsd_noise::Int64=1: the sd of the noise matrix\n\nExamples\n\nfrench = CSV.DataFrame!(CSV.File(joinpath(\"data\", \"french_mini.csv\")))\nfrench_val = french[100:end,:]\nS_train, S_val = JuLDL.make_S_matrix(\n    french,\n    french_val,\n    base=[\"Lexeme\"])\n\n...\n\n\n\n\n\n","category":"method"},{"location":"#Package-Guides","page":"Home","title":"Package Guides","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documenter can be installed using the Julia package manager vie GitHub HTTPS Links. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/MegamindHenry/JuLDL.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\npynld mode methods is not tested yet!","category":"page"},{"location":"#Someother-sections","page":"Home","title":"Someother sections","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"some other docs","category":"page"},{"location":"man/make_cue_matrix/","page":"Make Cue Matrix","title":"Make Cue Matrix","text":"CurrentModule = JuLDL","category":"page"},{"location":"man/make_cue_matrix/#Make-Cue-Matrix","page":"Make Cue Matrix","title":"Make Cue Matrix","text":"","category":"section"},{"location":"man/make_cue_matrix/","page":"Make Cue Matrix","title":"Make Cue Matrix","text":"  Cue_Matrix_Struct\r\n  make_cue_matrix\r\n  make_ngrams\r\n  make_cue_matrix(::DataFrame)\r\n  make_cue_matrix(::DataFrame,::Cue_Matrix_Struct)\r\n  make_ngrams(::Array,::Int64,::Bool,::Union{Nothing, String, Char},::Union{String, Char})","category":"page"},{"location":"man/make_cue_matrix/#JuLDL.Cue_Matrix_Struct","page":"Make Cue Matrix","title":"JuLDL.Cue_Matrix_Struct","text":"a struct that store info after makecuematrix C is the cue matrix f2i is the dictionary return indices giving features i2f is in another hand return features when giving indices gold_ind stores gold paths within a list of indices A is the adjacency matrix\n\n\n\n\n\n","category":"type"},{"location":"man/make_cue_matrix/#JuLDL.make_cue_matrix","page":"Make Cue Matrix","title":"JuLDL.make_cue_matrix","text":"Construct cue matrix.\n\n\n\n\n\n","category":"function"},{"location":"man/make_cue_matrix/#JuLDL.make_ngrams","page":"Make Cue Matrix","title":"JuLDL.make_ngrams","text":"Given tokens make n-grams.\n\n\n\n\n\n","category":"function"},{"location":"man/make_cue_matrix/#JuLDL.make_cue_matrix-Tuple{DataFrames.DataFrame}","page":"Make Cue Matrix","title":"JuLDL.make_cue_matrix","text":"makecuematrix(::DataFrame)\n\nThis function makes cue matrix and corresponding indices given dataset as csv file.\n\n...\n\nArguments\n\ngrams::Int64=3: the number of grams for cues \nwords_column::Union{String, Symbol}=:Words: the column name for word\ntokenized::Bool=false: whether the word is tokenized\nsep_token::Union{Nothing, String, Char}=nothing: what is the seperate token\nkeep_sep::Bool=false: whether to keep seperater in cues\nstart_end_token::Union{String, Char}=\"#\": start and end token\nverbose::Bool=false: if verbose, more information prints out\n\nExamples\n\nlatin = CSV.DataFrame!(CSV.File(joinpath(\"data\", \"latin_mini.csv\")))\nlatin_cue_obj_train = JuLDL.make_cue_matrix(\n  latin,\n  grams=3,\n  words_column=:Word,\n  tokenized=false,\n  keep_sep=false\n  )\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/make_cue_matrix/#JuLDL.make_cue_matrix-Tuple{DataFrames.DataFrame,JuLDL.Cue_Matrix_Struct}","page":"Make Cue Matrix","title":"JuLDL.make_cue_matrix","text":"makecuematrix(::DataFrame,::CueMatrixStruct)\n\nThis function make cue matrix and corresponding indices giving dataset as csv file and train dataset cue obj. This is often used to construct valcueobj, in order to maintain the same indices.\n\n...\n\nArguments\n\ngrams::Int64=3: the number of grams for cues \nwords_column::Union{String, Symbol}=:Words: the column name for word\ntokenized::Bool=false: whether the word is tokenized\nsep_token::Union{Nothing, String, Char}=nothing: what is the seperate token\nkeep_sep::Bool=false: whether to keep seperater in cues\nstart_end_token::Union{String, Char}=\"#\": start and end token\nverbose::Bool=false: if verbose, more information prints out\n\nExamples\n\nlatin = CSV.DataFrame!(CSV.File(joinpath(\"data\", \"latin_mini.csv\")))\nlatin_cue_obj_train = JuLDL.make_cue_matrix(\n  latin,\n  grams=3,\n  words_column=:Word,\n  tokenized=false,\n  keep_sep=false\n  )\n# simulate the val dataset. Notice here that latin_val is part of training dataset to make\n# sure all features and n-grams covered by training dataset.\nlatin_val = latin[101:150,:]\nlatin_cue_obj_val = JuLDL.make_cue_matrix(\n  latin_val,\n  latin_cue_obj_train,\n  grams=3,\n  words_column=:Word,\n  tokenized=false,\n  keep_sep=false\n  )\n\n...\n\n\n\n\n\n","category":"method"},{"location":"man/make_cue_matrix/#JuLDL.make_ngrams-Tuple{Array,Int64,Bool,Union{Nothing, Char, String},Union{Char, String}}","page":"Make Cue Matrix","title":"JuLDL.make_ngrams","text":"make_ngrams(::Array,::Int64,::Bool,   ::Union{Nothing, String, Char},::Union{String, Char}\n\ngiven a list of tokens, return all ngrams in a list\n\n\n\n\n\n","category":"method"},{"location":"man/utils/","page":"Utils","title":"Utils","text":"CurrentModule = JuLDL","category":"page"},{"location":"man/utils/#Utils","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"man/utils/","page":"Utils","title":"Utils","text":"  iscorrect\n  display_pred\n  translate\n  translate_path\n  is_truly_sparse\n  isattachable\n  iscomplete\n  isstart\n  isnovel","category":"page"},{"location":"man/utils/#JuLDL.iscorrect","page":"Utils","title":"JuLDL.iscorrect","text":"check whether the prediction is correct\n\n\n\n\n\n","category":"function"},{"location":"man/utils/#JuLDL.display_pred","page":"Utils","title":"JuLDL.display_pred","text":"display prediction nicely\n\n\n\n\n\n","category":"function"},{"location":"man/utils/#JuLDL.translate","page":"Utils","title":"JuLDL.translate","text":"translate indices into words or utterances\n\n\n\n\n\n","category":"function"},{"location":"man/utils/#JuLDL.translate_path","page":"Utils","title":"JuLDL.translate_path","text":"just append indices together\n\n\n\n\n\n","category":"function"},{"location":"man/utils/#JuLDL.is_truly_sparse","page":"Utils","title":"JuLDL.is_truly_sparse","text":"check whether a matrix is truly sparse regardless its format\n\n\n\n\n\ncheck whether a matrix is truly sparse regardless its format\n\n\n\n\n\n","category":"function"},{"location":"man/utils/#JuLDL.isattachable","page":"Utils","title":"JuLDL.isattachable","text":"check a gram is attach to another gram\n\n\n\n\n\ncheck a gram is attach to another gram\n\n\n\n\n\n","category":"function"},{"location":"man/utils/#JuLDL.iscomplete","page":"Utils","title":"JuLDL.iscomplete","text":"check a gram could complete a path\n\n\n\n\n\n","category":"function"},{"location":"man/utils/#JuLDL.isstart","page":"Utils","title":"JuLDL.isstart","text":"check a gram could start a path\n\n\n\n\n\n","category":"function"},{"location":"man/utils/#JuLDL.isnovel","page":"Utils","title":"JuLDL.isnovel","text":"check wheter a path is in training data or nor\n\n\n\n\n\n","category":"function"}]
}
